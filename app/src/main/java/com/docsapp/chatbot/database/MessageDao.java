package com.docsapp.chatbot.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatBotName = new Property(1, String.class, "chatBotName", false, "CHAT_BOT_NAME");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property Emotion = new Property(3, String.class, "emotion", false, "EMOTION");
        public final static Property ChatBotID = new Property(4, Long.class, "chatBotID", false, "CHAT_BOT_ID");
        public final static Property IsOwner = new Property(5, Boolean.class, "isOwner", false, "IS_OWNER");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CHAT_BOT_NAME' TEXT," + // 1: chatBotName
                "'MESSAGE' TEXT," + // 2: message
                "'EMOTION' TEXT," + // 3: emotion
                "'CHAT_BOT_ID' INTEGER," + // 4: chatBotID
                "'IS_OWNER' INTEGER);"); // 5: isOwner
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatBotName = entity.getChatBotName();
        if (chatBotName != null) {
            stmt.bindString(2, chatBotName);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
 
        String emotion = entity.getEmotion();
        if (emotion != null) {
            stmt.bindString(4, emotion);
        }
 
        Long chatBotID = entity.getChatBotID();
        if (chatBotID != null) {
            stmt.bindLong(5, chatBotID);
        }
 
        Boolean isOwner = entity.getIsOwner();
        if (isOwner != null) {
            stmt.bindLong(6, isOwner ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chatBotName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emotion
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // chatBotID
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isOwner
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatBotName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmotion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChatBotID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsOwner(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
